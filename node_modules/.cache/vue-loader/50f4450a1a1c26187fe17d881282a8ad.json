{"remainingRequest":"/Users/mttest/Profile/mac-drive-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mttest/Profile/mac-drive-web/src/views/components/FileUploader.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mttest/Profile/mac-drive-web/src/views/components/FileUploader.vue","mtime":1703323435140},{"path":"/Users/mttest/Profile/mac-drive-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mttest/Profile/mac-drive-web/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/mttest/Profile/mac-drive-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mttest/Profile/mac-drive-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["FileUploader.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"FileUploader.vue","sourceRoot":"src/views/components","sourcesContent":["<template>\n  <div id=\"global-uploader\">\n    <!-- Upload component -->\n    <uploader\n      class=\"uploader-box\"\n      ref=\"uploader\"\n      :options=\"options\"\n      :autoStart=\"false\"\n      @file-added=\"handleFileAdded\"\n      @file-progress=\"onFileProgress\"\n      @file-success=\"handleFileSuccess\"\n      @file-error=\"handleFileError\"\n    >\n      <uploader-unsupport></uploader-unsupport>\n      <!-- Select file button -->\n      <uploader-btn class=\"select-file-btn\" :attrs=\"attrs\" ref=\"uploadBtn\"\n      >Select File\n      </uploader-btn\n      >\n      <!-- Panel for files being uploaded -->\n      <uploader-list v-show=\"panelShow\">\n        <div class=\"file-panel\" slot-scope=\"props\">\n          <div class=\"panel-title\">\n            <span class=\"text\">Upload List</span>\n\n            <div class=\"operate-btn-wrapper\">\n              <el-button\n                type=\"text\"\n                title=\"Close Window\"\n                icon=\"el-icon-close\"\n                @click=\"handleClosePanel\"\n              >\n              </el-button>\n            </div>\n          </div>\n          <!-- List of files being uploaded -->\n          <ul class=\"file-list\">\n            <li class=\"file-item\" v-for=\"file in props.fileList\" :key=\"file.id\">\n              <uploader-file\n                ref=\"files\"\n                :class=\"`file_${file.id}`\"\n                :file=\"file\"\n                :list=\"true\"\n              ></uploader-file>\n            </li>\n            <div class=\"no-file\" v-if=\"!props.fileList.length\">\n              <i class=\"icon-empty-file\"></i> No files waiting to be uploaded\n            </div>\n          </ul>\n        </div>\n      </uploader-list>\n    </uploader>\n  </div>\n</template>\n\n\n<script>\nimport SparkMD5 from \"spark-md5\";\nimport { getMultipartUpload, getUpFile } from \"@/request/file\";\n\nexport default {\n  name: \"FileUploader\",\n  data() {\n    return {\n      options: {\n        // The target upload URL, which can be a string or a function. If it's a function, it will be passed with Uploader.File instance,\n        // current chunk Uploader.Chunk, and whether it is in test mode. The default value is '/'.\n        target: function(file, chunkFile, mode) {\n          // Entering this method before each chunk upload\n          console.log(\"Entering target\");\n          console.log(\"File name: \" + file.name);\n          console.log(\"Current chunk sequence number: \" + chunkFile.offset);\n          console.log(\"Retrieved chunk upload URL:\");\n          console.log(file.chunkUrlData);\n          const key = \"chunk_\" + chunkFile.offset; // Key for retrieving chunk link URL\n          return file.chunkUrlData[key];\n        },\n        // Sends a GET request to the server for each chunk to check if it already exists. If implemented on the server side,\n        // this will allow continuing uploads after a browser crash or even computer restart. (Default: true)\n        testChunks: true,\n        // Chunks are divided according to this value. The size of the last chunk will be greater than or equal to this value, but less than twice this value.\n        // See this Issue #51, default 1*1024*1024.\n        chunkSize: 5 * 1024 * 1024,\n        // Forces all chunks to be less than or equal to chunkSize. Otherwise, the last chunk will be greater than or equal to chunkSize. (Default: false)\n        forceChunkSize: true,\n        // Additional parameters included in multipart POST with data. This can be an object or a function. If it is a function,\n        // it will be passed an Uploader.File, an Uploader.Chunk object, and an isTest boolean value (default value {}：)\n        query: function(file, chunkFile, mode) {\n          const data = { partNumber: chunkFile.offset + 1 };\n          return data;\n        },\n        uploadMethod: \"PUT\",\n        // The method used for uploading, options are multipart or octet, default multipart, refer to multipart vs octet.\n        // MiniO chunking can't use form\n        method: \"octet\",\n        // Handles request parameters, default function (params) {return params}, usually used to modify parameter names or delete parameters.\n        processParams: function(params) {\n          return {};\n        }\n        // headers: {\n        //  'Content-Type': 'binary/octet-stream'\n        // }\n      },\n      attrs: {\n        accept: \"*\" // Acceptable file types\n      },\n      panelShow: false // Whether the file upload panel is shown\n    };\n  },\n  computed: {\n    // Global upload component uploader instance\n    uploader() {\n      return this.$refs.uploader.uploader;\n    },\n    // Current path\n    filePath() {\n      return this.$route.query.filePath ? this.$route.query.filePath : \"/\";\n    },\n    // Whether the file upload event is triggered\n    startUploadFile() {\n      return this.$store.state.file.startUploadFile;\n    }\n  },\n  methods: {\n    // Trigger the click event of the select file button\n    triggerSelectFileClick() {\n      this.$refs.uploadBtn.$el.click(); // Trigger the click event of the select file button\n    },\n\n    // File added callback function\n    handleFileAdded(file) {\n      this.panelShow = true; // Show file upload panel\n      this.calculateFileMD5(file); // Calculate file MD5 value\n      // Calculate MD5\n      // Get chunk upload link\n      // eslint-disable-next-line no-unused-vars\n      const res = this.getChunkUploadUrl(file);\n      console.log(\"File added to check if chunk URL is retrieved\");\n      console.log(file.chunkUrlData);\n    },\n    async getChunkUploadUrl(file) {\n      // Requesting the server for each chunk's upload link\n      console.log(file);\n      console.log(\"Retrieving chunk upload link\");\n      const fileName = file.name; // File name\n      const fileSize = file.size; // File size\n      const chunkSize = file.chunks.length; // Number of chunks\n      // Request backend to return upload link for each chunk\n      // eslint-disable-next-line no-unused-vars\n      const res = await getUpFile({\n        filename: fileName,\n        chunkNumber: chunkSize,\n        filePath: this.filePath,\n        uploadTime: new Date().getTime(),\n        fileSize: fileSize,\n        identifier: file.uniqueIdentifier\n      })\n        .then(function(response) {\n          console.log(\"Retrieved uploadId:\" + response.uploadId);\n          console.log(\"Retrieved chunk upload link collection:\");\n          file.chunkUrlData = response;\n          console.log(file.chunkUrlData);\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n    },\n    /**\n     * File upload process callback function\n     * @param rootFile The root Uploader.File object of the successfully uploaded file, which should contain or equal the successfully uploaded file\n     * @param file The current successful Uploader.File object itself\n     * @param chunk The Uploader.Chunk instance, which is the last chunk instance of the file, if you want to get the response code, chunk.xhr.status is it\n     */\n    onFileProgress(rootFile, file, chunk) {\n      // Print information during file upload\n      console.log(\n        `Uploading ${file.name}, chunk: ${chunk.startByte /\n        1024 /\n        1024} ~ ${chunk.endByte / 1024 / 1024}`\n      );\n    },\n    /**\n     * File upload success callback function\n     * @param rootFile\n     * @param file\n     */\n    handleFileSuccess(rootFile, file) {\n      console.log(\"Single file uploaded successfully\", arguments);\n      // Call backend to merge files\n      const fileName = file.name; // File name\n      const uploadId = file.chunkUrlData.uploadId; // uploadId\n      console.log();\n      getMultipartUpload({\n        FileName: fileName,\n        uploadId: uploadId\n      })\n        .then(function(response) {\n          console.log(response);\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n      this.$emit(\"getTableData\");\n      console.log(\"Merge complete\");\n    },\n\n    // File upload failure callback function\n    handleFileError(rootFile, file, responseStr) {\n      this.$message({\n        message: JSON.parse(responseStr).message,\n        type: \"error\"\n      });\n    },\n\n    // Calculate file MD5 value\n    calculateFileMD5(file) {\n      let fileReader = new FileReader();\n      let blobSlice =\n        File.prototype.slice ||\n        File.prototype.mozSlice ||\n        File.prototype.webkitSlice;\n      let currentChunk = 0;\n      const chunkSize = 5 * 1024 * 1024;\n      let chunks = Math.ceil(file.size / chunkSize);\n      let spark = new SparkMD5.ArrayBuffer();\n      file.pause(); // Pause file upload\n      loadNext();\n      fileReader.onload = e => {\n        spark.append(e.target.result);\n        if (currentChunk < chunks) {\n          currentChunk++;\n          loadNext();\n        } else {\n          let md5 = spark.end();\n          this.calculateFileMD5End(md5, file);\n          // console.log(\n          //   `MD5 calculation complete: ${file.name} \\nMD5: ${md5} \\nChunks: ${chunks} Size: ${\n          //     file.size\n          //   } Time: ${new Date().getTime() - time} ms`\n          // );\n        }\n      };\n      fileReader.onerror = function() {\n        this.$notify({\n          title: \"Upload error\",\n          message: `File ${file.name} read error, please check the file`,\n          type: \"error\",\n          duration: 2000\n        });\n        file.cancel(); // Cancel upload and remove from file list.\n      };\n\n      function loadNext() {\n        let start = currentChunk * chunkSize;\n        let end =\n          start + chunkSize >= file.size ? file.size : start + chunkSize;\n        fileReader.readAsArrayBuffer(blobSlice.call(file.file, start, end));\n      }\n    },\n    // File MD5 calculation complete\n    calculateFileMD5End(md5, file) {\n      file.uniqueIdentifier = md5;\n      file.resume(); // Continue file upload\n    },\n\n    // Close upload panel\n    handleClosePanel() {\n      this.uploader.cancel(); // Cancel file upload\n      this.panelShow = false;\n\n      this.$emit(\"getTableData\");\n    }\n  }\n};\n</script>\n\n\n<style lang=\"stylus\" scoped>\n#global-uploader {\n  position: fixed;\n  z-index: 20;\n  right: 15px;\n  bottom: 15px;\n\n  .uploader-box {\n    width: 520px;\n  }\n\n  .file-panel {\n    background-color: #fff;\n    border: 1px solid #e2e2e2;\n    border-radius: 7px 7px 0 0;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\n\n    .panel-title {\n      display: flex;\n      height: 40px;\n      line-height: 40px;\n      padding: 0 16px;\n      border-bottom: 1px solid #ddd;\n\n      .text {\n        padding-left: 0;\n        margin-bottom: 0;\n        font-size: 16px;\n        color: #303133;\n      }\n\n      .operate-btn-wrapper {\n        flex: 1;\n        text-align: right;\n\n        >>> .el-button {\n          *:hover {\n            opacity: 0.5;\n          }\n\n          i[class^=el-icon-] {\n            color: #000;\n          }\n        }\n      }\n    }\n\n    .file-list {\n      position: relative;\n      height: 240px;\n      overflow-x: hidden;\n      overflow-y: auto;\n      background-color: #fff;\n      font-size: 14px;\n\n      .file-item {\n        background-color: #fff;\n\n        >>> .uploader-file-icon {\n          display: none;\n        }\n      }\n    }\n  }\n\n  .no-file {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    font-size: 16px;\n  }\n\n  /deep/.uploader-file-actions > span {\n    margin-right: 6px;\n  }\n}\n\n/* 隐藏上传按钮 */\n.select-file-btn {\n  display: none;\n}\n</style>\n"]}]}